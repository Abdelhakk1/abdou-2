import { db } from './database';export const admin = {  async isAdmin(userId: string) {    const { rows } = await db.query('SELECT * FROM admin_users WHERE user_id = $1', [userId]);    return rows.length > 0;  },  async getSystemSettings() {    const { rows } = await db.query('SELECT * FROM system_settings', []);    return rows;  },  async updateSystemSetting(settingKey: string, value: boolean) {    const { rows } = await db.query(      'UPDATE system_settings SET setting_value = $1 WHERE setting_key = $2 RETURNING *',      [value, settingKey]    );    return rows[0];  },  async getGalleryItems() {    const { rows } = await db.query('SELECT * FROM gallery_items ORDER BY display_order ASC, created_at DESC', []);    return rows;  },  async createGalleryItem(itemData: any) {    const { rows } = await db.query(      'INSERT INTO gallery_items (title, description, image_url, category, featured, display_order) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *',      [        itemData.title,        itemData.description,        itemData.imageUrl,        itemData.category,        itemData.featured || false,        itemData.displayOrder || 0,      ]    );    return rows[0];  },  async updateGalleryItem(id: string, updates: any) {    const { rows } = await db.query(      'UPDATE gallery_items SET title = $1, description = $2, image_url = $3, category = $4, featured = $5, display_order = $6 WHERE id = $7 RETURNING *',      [        updates.title,        updates.description,        updates.image_url,        updates.category,        updates.featured,        updates.display_order,        id,      ]    );    return rows[0];  },  async deleteGalleryItem(id: string) {    await db.query('DELETE FROM gallery_items WHERE id = $1', [id]);  },  async getWorkshopSchedules() {    const { rows } = await db.query('SELECT * FROM workshop_schedules ORDER BY date ASC', []);    return rows;  },  async createWorkshopSchedule(scheduleData: any) {    const { rows } = await db.query(      'INSERT INTO workshop_schedules (workshop_name, workshop_type, description, date, start_time, end_time, max_participants, price, discount_price, location, notes, image_url) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING *',      [        scheduleData.workshopName,        scheduleData.workshopType,        scheduleData.description,        scheduleData.date,        scheduleData.startTime,        scheduleData.endTime,        scheduleData.maxParticipants || 4,        scheduleData.price,        scheduleData.discountPrice || null,        scheduleData.location || 'shop',        scheduleData.notes,        scheduleData.imageUrl,      ]    );    return rows[0];  },  async updateWorkshopSchedule(id: string, updates: any) {    const { rows } = await db.query('UPDATE workshop_schedules SET workshop_name = $1, ... WHERE id = $2 RETURNING *', [updates.workshop_name, id]);    return rows[0];  },  async deleteWorkshopSchedule(id: string) {    await db.query('DELETE FROM workshop_schedules WHERE id = $1', [id]);  },  async getOnlineCourses() {    const { rows } = await db.query('SELECT * FROM online_courses ORDER BY created_at DESC', []);    return rows.map((course) => ({      ...course,      features: course.features || [],      modules: course.modules || [],    }));  },  async createOnlineCourse(courseData: any) {    const { rows } = await db.query(      'INSERT INTO online_courses (title, description, price, discount_price, duration_hours, module_count, image_url, google_drive_link, features, modules, status) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *',      [        courseData.title,        courseData.description,        courseData.price,        courseData.discountPrice || null,        courseData.durationHours || null,        courseData.moduleCount || null,        courseData.imageUrl || null,        courseData.googleDriveLink || null,        courseData.features || [],        courseData.modules || [],        'active',      ]    );    return rows[0];  },  async updateOnlineCourse(id: string, updates: any) {    const { rows } = await db.query('UPDATE online_courses SET title = $1, ... WHERE id = $2 RETURNING *', [updates.title, id]);    return rows[0];  },  async deleteOnlineCourse(id: string) {    await db.query('DELETE FROM online_courses WHERE id = $1', [id]);  },  async getUnavailableDates() {    const { rows } = await db.query('SELECT * FROM get_unavailable_dates()', []);    return rows;  },  async addUnavailableDate(dateData: any) {    const { rows } = await db.query(      'INSERT INTO unavailable_dates (date, reason) VALUES ($1, $2) RETURNING *',      [dateData.date, dateData.reason || 'Unavailable']    );    return rows[0];  },  async removeUnavailableDate(id: string) {    await db.query('DELETE FROM unavailable_dates WHERE id = $1', [id]);  },  async getAllCourseOrders() {    const { rows } = await db.query(      `SELECT co.*, u.full_name, u.email, u.phone, pr.id as receipt_id, pr.transaction_number, pr.amount as receipt_amount, pr.receipt_url, pr.notes as receipt_notes, pr.verified as receipt_verified, pr.created_at as receipt_created_at       FROM course_orders co       LEFT JOIN users u ON co.user_id = u.id       LEFT JOIN payment_receipts pr ON co.id = pr.order_id       ORDER BY co.created_at DESC`,      []    );    return rows;  },  async getAllCustomCakeOrders() {    const { rows } = await db.query(      `SELECT cco.*, u.full_name, u.email, u.phone       FROM custom_cake_orders cco       LEFT JOIN users u ON cco.user_id = u.id       ORDER BY cco.created_at DESC`,      []    );    return rows;  },  async getAllWorkshopReservations() {    const { rows } = await db.query(      `SELECT wr.*, u.full_name, u.email, u.phone       FROM workshop_reservations wr       LEFT JOIN users u ON wr.user_id = u.id       ORDER BY wr.created_at DESC`,      []    );    return rows;  },  async updateCourseOrderStatus(orderId: string, status: string) {    const { rows } = await db.query(      'UPDATE course_orders SET status = $1 WHERE id = $2 RETURNING *',      [status, orderId]    );    return rows[0];  },  async verifyPayment(receiptId: string) {    const receipt = await db.queryOne('SELECT * FROM payment_receipts WHERE id = $1', [receiptId]);    if (!receipt) throw new Error('Receipt not found');    const course = await db.queryOne('SELECT * FROM online_courses WHERE title = $1', [receipt.course_name]);    if (!course || !course.google_drive_link) throw new Error('Course not found or Google Drive link not set');    await db.query('UPDATE payment_receipts SET verified = true, verified_at = now() WHERE id = $1', [receiptId]);    await db.query('UPDATE course_orders SET status = \'verified\' WHERE id = $1', [receipt.order_id]);    const { rows } = await db.query(      'INSERT INTO course_access (user_id, order_id, course_name, google_drive_link) VALUES ($1, $2, $3, $4) RETURNING *',      [receipt.user_id, receipt.order_id, receipt.course_name, course.google_drive_link]    );    return rows[0];  },  async getDashboardStats() {    const courseOrders = await db.query('SELECT id, status FROM course_orders', []);    const cakeOrders = await db.query('SELECT id, status FROM custom_cake_orders', []);    const workshopReservations = await db.query('SELECT id, status FROM workshop_reservations', []);    const galleryItems = await db.query('SELECT id FROM gallery_items', []);    const contactMessages = await db.query('SELECT id, status FROM contact_messages', []);    return {      totalCourseOrders: courseOrders.rows.length,      pendingCourseOrders: courseOrders.rows.filter((o) => o.status === 'pending' || o.status === 'paid').length,      totalCakeOrders: cakeOrders.rows.length,      pendingCakeOrders: cakeOrders.rows.filter((o) => o.status === 'pending').length,      totalWorkshopReservations: workshopReservations.rows.length,      pendingWorkshopReservations: workshopReservations.rows.filter((r) => r.status === 'pending').length,      totalGalleryItems: galleryItems.rows.length,      totalContactMessages: contactMessages.rows.length,      unreadContactMessages: contactMessages.rows.filter((m) => m.status === 'unread').length,    };  },};